"use client"

import { motion } from "framer-motion"
import { Database, Network, BrainCircuit, ShieldCheck, Layers, Server, Rocket } from "lucide-react"
import MovingDotsBackground from "./MovingDotsBackground" // 1. Import the background component

const projectFlow = [
  {
    icon: <Database className="h-5 w-5" />,
    title: "Multi-Source Data Integration",
    description: "Aggregates data from decentralized sources, including real collaboration records stored on IPFS and simulated attestations from Lens and Ceramic protocols."
  },
  {
    icon: <Network className="h-5 w-5" />,
    title: "Social Graph Engine",
    description: "A powerful Python engine processes raw interactions using the NetworkX library to construct a complex, weighted, and directed social trust graph."
  },
  {
    icon: <BrainCircuit className="h-5 w-5" />,
    title: "Hybrid AI Scoring Model",
    description: "Calculates a nuanced trust score by combining Google's PageRank algorithm with a Hugging Face Transformer model for NLP sentiment analysis on endorsement text."
  },
  {
    icon: <ShieldCheck className="h-5 w-5" />,
    title: "Off-Chain ZK Proof Generation",
    description: "An end-to-end system built with Circom and snarkjs generates real Groth16 zero-knowledge proofs off-chain, ensuring privacy and computational efficiency."
  },
  {
    icon: <Layers className="h-5 w-5" />,
    title: "On-Chain ZK Verifier",
    description: "A Solidity smart contract, generated by snarkjs and deployed to the Optimism Sepolia testnet, acts as a decentralized and immutable verifier for the ZK proofs."
  },
  {
    icon: <Server className="h-5 w-5" />,
    title: "REST API Service",
    description: "A resilient API built with Node.js and Express.js serves the trust scores and handles on-chain verification requests, connecting the data layer to the user."
  },
  {
    icon: <Rocket className="h-5 w-5" />,
    title: "Full-Stack Deployment",
    description: "The modular application is fully deployed and live, with the frontend on Vercel for a fast user experience and the backend on Render for scalable API performance."
  }
]

const flowStepVariants = {
  hidden: { opacity: 0, translateX: -20 },
  visible: { opacity: 1, translateX: 0 }
}

const FlowStep = ({ item }: { item: typeof projectFlow[0] }) => (
  <motion.li 
    className="mb-10 ml-12"
    variants={flowStepVariants}
    transition={{ type: "spring", stiffness: 80, damping: 20 }}
  >
    <span className="absolute flex items-center justify-center w-10 h-10 bg-gray-900 rounded-full -left-5 border border-gray-700 text-cyan-400 will-change-transform">
      {item.icon}
    </span>
    <h3 className="flex items-center mb-1 text-lg font-semibold text-white">
      {item.title}
    </h3>
    <p className="text-base font-normal text-gray-400">{item.description}</p>
  </motion.li>
)

export default function About() {
  return (
    // 2. Add 'relative' and 'overflow-hidden' to the main section to contain the background
    <section id="about" className="relative py-24 md:py-32 bg-black overflow-hidden">
      
      {/* 3. Add the MovingDotsBackground component */}
      <div className="absolute inset-0 z-0">
        <MovingDotsBackground />
      </div>

      {/* 4. Add 'relative z-10' to the content container to ensure it's on top of the background */}
      <div className="relative z-10 container mx-auto px-6">
        <div className="max-w-3xl mx-auto text-center mb-16 md:mb-24">
          <h2 className="text-4xl md:text-5xl font-light mb-6 text-white">How TrustNet Works</h2>
          <p className="text-lg text-gray-400 leading-relaxed">
            TrustNet employs a sophisticated pipeline to transform raw data into verifiable reputation. Here is a step-by-step overview of the entire process.
          </p>
        </div>

        <div className="max-w-2xl mx-auto">
          <motion.ol 
            className="relative border-l border-gray-700"
            initial="hidden"
            whileInView="visible"
            viewport={{ once: true }}
            variants={{
              hidden: {},
              visible: { transition: { staggerChildren: 0.2 } }
            }}
          >
            {projectFlow.map((item, index) => (
              <FlowStep key={index} item={item} />
            ))}
          </motion.ol>
        </div>
      </div>
    </section>
  )
}